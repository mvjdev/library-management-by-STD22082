openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD22082
servers:
  - url: https://library.com
tags:
  - name: Books
  - name: Author
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        # TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDate
          description: Filter books released on or after this date (YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
        - $ref: "#/components/parameters/queryPagination"
        - $ref: "#/components/parameters/queryPageSize"

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CrupdateBook"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
  # Attachement Author and Book
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Associate an author with a book
      operationId: updateBookAuthor
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
  /books/authors:
      put:
        tags:
        - Books
        summary: Update the author of books
        operationId: updateBooksAuthors
        requestBody:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UpdateBookAuthor"
        responses:
          200:
            description: Les auteurs des livres ont été modifiés
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/Book"
  /authors:
    # TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      tags:
        - Author
      summary: Get all authors
      description: Get a list of authors, optionally filtered by name
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/pathPagination"
        - $ref: "#/components/parameters/pathPagesize"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
    put:
      tags:
        - Author
      summary: Create or update an author
      operationId: createUpdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/author"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
    delete:
      tags:
        - Books
      summary: Delete an author by ID
      description: Delete an author by their unique ID
      operationId: deleteAuthor
      parameters:
        - in: path
          name: authorId
          description: ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultResponse'
components:
  parameters:
    queryPagination:
      in: query
      name: page
      description: Page number
      required: true
      schema:
        type: integer
        default: 1
    queryPageSize:
      in: query
      name: pageSize
      description: Number of items per page
      required: true
      schema:
        type: integer
        default: 50
    pathPagination:
      in: path
      name: page
      description: Page number
      required: true
      schema:
        type: integer
        default: 1
    pathPagesize:
      in: path
      name: pageSize
      description: Number of items per page
      required: true
      schema:
        type: integer
        default: 50
  schemas:
    Book:
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
        - $ref: '#/components/schemas/DefaultResponse'
        - type: object
          properties:
            body:
              $ref: '#/components/schemas/Book'
      properties:
        author:
          nullable: true
          #TODO1: set it as a component with properties : id, name, sex (M or F)
          $ref: "#/components/schemas/author"
    author:
      type: object
      properties:
        authorId:
          type: string
        authorNname:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    CrupdateBook:
      type: object
      properties:
        bookId:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
     type: object
     properties:
      bookId:
        type: string
      authorId:
        type: string
    DefaultResponse:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: integer
              description: HTTP status code
            message:
              type: string
              description: Response message
        body:
          type: object
          description: Response body

