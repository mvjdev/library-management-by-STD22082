openapi: 3.0.3
info:
  title: Library API
  version: 1.5.0
  description: STD22078 and STD22082
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: startInterval
          description: the date start interval that will filter the response
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: endInterval
          description: the end date of interval that will filter the response
          required: false
          schema:
            type: string
            format: date
        - $ref: '#/components/parameters/queryPagination'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      security:
        - oAuth2Authorizer:
            - admin
      tags:
        - Books
      summary: Create or update a list of books
      operationId: Create or update Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
        - Authors
      summary: update book's author by their own ID
      operationId: UpdateBookAuthor
      security:
        - oAuth2Authorizer:
            - admin
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: integer
        - in: path
          name: authorId
          required: true
          schema:
            type: integer
      responses:
        200:
          description: return the updated book data including the author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/authors:
    put:
      tags:
        - Books
        - Authors
      summary: update
      operationId: CrupdateBook
      security:
        - oAuth2Authorizer:
            - admin
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                properties:
                  bookId:
                    type: integer
                  authorId:
                    type: integer
      responses:
        200:
          description: return the list of updated books and their authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/import:
    post:
      security:
        - oAuth2Authorizer:
            - admin
      tags:
        - Import
      summary: Import books from Excel or JSON
      operationId: ImportBooks
      requestBody:
        content:
          application/vnd.google-apps.spreadsheet:
            schema:
              $ref: '#/components/schemas/ImportBook'
          application/json:
            schema:
              $ref: '#/components/schemas/ImportBook'
      responses:
        200:
          description: List of imported books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
    post:
      tags:
        - Authors
      summary: Remove a list of author by their Id
      description: Remove an author by the body request
      operationId: removeAuthor
      security:
        - oAuth2Authorizer:
            - admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
      responses:
        200:
          description: return a list of the removed authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors/{page}/{pageSize}:
    get:
      tags:
        - Authors
      summary: Get all filtered authors
      description: get all authors filtered by given name
      operationId: getFilteredAuthors
      parameters:
        - in: query
          name: name
          description: the name that filter the query
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/pathPaginationPage'
        - $ref: '#/components/parameters/pathPaginationSize'
      responses:
        200:
          description: all filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      security:
        - oAuth2Authorizer:
            - admin
      tags:
        - Authors
      summary: create or modify an author
      description: It almost looks for the id to find if there is already on and modify else create
      operationId: updateAuthor
      parameters:
        - $ref: '#/components/parameters/pathPaginationPage'
        - $ref: '#/components/parameters/pathPaginationSize'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: return the modified author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors/{id}:
    delete:
      tags:
        - Authors
      summary: delete an author by its ID
      operationId: DeleteAuthorById
      security:
        - oAuth2Authorizer:
            - admin
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: return the deleted author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors/import:
    post:
      security:
        - oAuth2Authorizer:
            - admin
      tags:
        - Import
      summary: Import authors from Excel or JSON
      operationId: ImportAuthors
      requestBody:
        content:
          application/vnd.google-apps.spreadsheet:
            schema:
              $ref: '#/components/schemas/ImportAuthors'
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAuthors'
      responses:
        200:
          description: List of imported authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /books/borrow:
    post:
      tags:
        - Action
      security:
        - oAuth2Authorizer:
            - admin
      operationId: BorrowBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
      responses:
        200:
          description: return the borrowed books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BorrowBook'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/return:
    post:
      tags:
        - Action
      security:
        - oAuth2Authorizer:
            - admin
      operationId: ReturnBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
      responses:
        200:
          description: return the returned books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/availables:
    get:
      tags:
        - Action
      summary: get available book to borrow
      operationId: GetAvailableBooks
      responses:
        200:
          description: return a list of available books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /books/{idGuest}/borrowed:
    get:
      tags:
        - Action
      summary: get guest activities on borrowing books
      operationId: GetGuestBorrowedBooks
      security:
        - oAuth2Authorizer:
            - admin
      parameters:
        - in: path
          name: idGuest
          required: true
          schema:
            type: integer
      responses:
        200:
          description: return list of borrowed books of a specific guest
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BorrowBook'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/{idGuest}/returned:
    get:
      tags:
        - Action
      summary: get guest activities on returned books
      operationId: Get guest returned book
      security:
        - oAuth2Authorizer:
            - admin
      parameters:
        - in: path
          name: idGuest
          required: true
          schema:
            type: integer
      responses:
        200:
          description: return all returned books of a specific guest
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /guest:
    get:
      tags:
        - Guests
      summary: Get all guests
      operationId: getGuests
      responses:
        200:
          description: return list of guest
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Guest'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - Guests
      summary: Create or update a guest
      operationId: CreateUpdateGuest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Guest'
      responses:
        200:
          description: return updated or created guest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guest'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Guests
      summary: Delete a guest by ID
      operationId: deleteGuestById
      parameters:
        - name: guestId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: return the deleted guest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guest'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
components:
  securitySchemes:
    oAuth2Authorizer:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://library.auth
          scopes:
            read_user: read an user
            write_user: write a new user
            admin: access to admin resources
  parameters:
    queryPagination:
      in: query
      name: pagination
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
    pathPaginationPage:
      in: path
      name: page
      required: true
      schema:
        type: integer
        default: 1
    pathPaginationSize:
      in: path
      name: pageSize
      required: true
      schema:
        type: integer
        default: 50
  responses:
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusMessage'
          example:
            type: error
            message: Bad request
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusMessage'
          example:
            type: error
            message: Forbidden
    500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusMessage'
          example:
            type: error
            message: Internal server error
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        gender:
          type: string
          enum:
            - Male
            - Female
    CrupdateBook:
      type: object
      properties:
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Book:
      type: object
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
      properties:
        id:
          type: string
        author:
          $ref: '#/components/schemas/Author'
    StatusMessage:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    ImportBook:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/CrupdateBook'
        properties:
          idAuthor:
            type: integer
    ImportAuthors:
      type: array
      items:
        properties:
          authorName:
            type: string
          gender:
            type: string
            enum:
              - M
              - F
    BorrowBook:
      type: object
      allOf:
        - $ref: '#/components/schemas/Book'
      properties:
        borrow_start:
          type: string
          format: 'date-time'
        should_return:
          type: string
          format: 'date-time'
    Guest:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        reference:
          type: string